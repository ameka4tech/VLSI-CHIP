 
 
VLSI PROJECT 
HARDWARE ASSISTED ENCRYPTION ENGINES  FOR SECURING CRITICAL DATA

Procedure for Execution
Execute as One Module in Vivado, if used in Cadence Use multiple instantiation and in Synopsys execute as a file to test the functioning 
Message Authentication Unit Verilog Code: 
//Execute as One Module in Vivado, if used in Cadence Use multiple instatantiation and in Synopsys execute as a file to test the functioning 
 
 
module gost89_mac( 
  input              clk,   input              reset,   input              load_data,   input      [511:0] sbox,   input      [255:0] key,   input      [63:0]  in,   output reg [31:0]  out,   output reg         busy 
);   reg  [4:0]  counter;   reg  [31:0] round_key;   reg         need_xor;   reg  [31:0] n1, n2;   wire [31:0] out1, out2; 
 
  gost89_round 
    rnd(clk, sbox, round_key, n1, n2, out1, out2); 
 
  always @(posedge clk) begin     if (reset && !load_data) begin       counter  <= 17;       need_xor <= 0;       busy <= 0;     end 
 
    if (!reset && load_data) begin       if (need_xor) begin         n1 <= in[63:32] ^ n2;         n2 <= in[31:0]  ^ n1;       end else begin         n1 <= in[63:32];         n2 <= in[31:0];         need_xor <= 1;       end       counter <= 0;       busy <= 1;     end 
 
    if (reset && load_data) begin       n1 <= in[63:32];       n2 <= in[31:0]; 
      counter  <= 0;       need_xor <= 1;       busy <= 1;     end 
 
    if (!reset && !load_data) begin       if (counter < 17)         counter <= counter + 1;       if (counter > 0 && counter < 17) begin         n1 <= out1;         n2 <= out2;       end       if (counter == 16) begin         busy <= 0;         out  <= out2;       end     end   end 
 
  always @(posedge clk)     case (counter) 
      0:  round_key <= key[255:224]; 
      1:  round_key <= key[223:192]; 
      2:  round_key <= key[191:160]; 
      3:  round_key <= key[159:128]; 
      4:  round_key <= key[127:96]; 
      5:  round_key <= key[95:64]; 
      6:  round_key <= key[63:32]; 
      7:  round_key <= key[31:0]; 
      8:  round_key <= key[255:224]; 
      9:  round_key <= key[223:192]; 
      10: round_key <= key[191:160]; 
      11: round_key <= key[159:128]; 
      12: round_key <= key[127:96]; 
      13: round_key <= key[95:64]; 
      14: round_key <= key[63:32];       15: round_key <= key[31:0];     endcase endmodule 
 
 
module gost89_mac(   input              clk,   input              reset,   input              load_data,   input      [511:0] sbox,   input      [255:0] key,   input      [63:0]  in,   output reg [31:0]  out,   output reg         busy 
);   reg  [4:0]  counter;   reg  [31:0] round_key;   reg         need_xor;   reg  [31:0] n1, n2;   wire [31:0] out1, out2; 
 
  gost89_round     rnd(clk, sbox, round_key, n1, n2, out1, out2); 
 
  always @(posedge clk) begin     if (reset && !load_data) begin       counter  <= 17;       need_xor <= 0;       busy <= 0;     end 
 
    if (!reset && load_data) begin       if (need_xor) begin         n1 <= in[63:32] ^ n2;         n2 <= in[31:0]  ^ n1;       end else begin         n1 <= in[63:32];         n2 <= in[31:0];         need_xor <= 1; 
      end       counter <= 0;       busy <= 1;     end 
 
    if (reset && load_data) begin       n1 <= in[63:32];       n2 <= in[31:0];       counter  <= 0;       need_xor <= 1;       busy <= 1;     end 
 
    if (!reset && !load_data) begin       if (counter < 17)         counter <= counter + 1;       if (counter > 0 && counter < 17) begin         n1 <= out1;         n2 <= out2;       end       if (counter == 16) begin         busy <= 0;         out  <= out2;       end     end 
  end 
 
  always @(posedge clk)     case (counter)       0:  round_key <= key[255:224]; 
      1:  round_key <= key[223:192]; 
      2:  round_key <= key[191:160]; 
      3:  round_key <= key[159:128]; 
      4:  round_key <= key[127:96]; 
      5:  round_key <= key[95:64]; 
      6:  round_key <= key[63:32]; 
      7:  round_key <= key[31:0]; 
      8:  round_key <= key[255:224]; 
      9:  round_key <= key[223:192]; 
      10: round_key <= key[191:160]; 
      11: round_key <= key[159:128]; 
      12: round_key <= key[127:96]; 
      13: round_key <= key[95:64]; 
      14: round_key <= key[63:32];       15: round_key <= key[31:0];     endcase endmodule 
 
module gost89_round( 
  input          clk, 
  input  [511:0] sbox,   input  [31:0]  key,   input  [31:0]  n1,   input  [31:0]  n2,   output [31:0]  out1,   output [31:0]  out2 
); 
  wire [31:0] tmp1, tmp2; 
 
  assign tmp1 = n1 + key; 
 
  gost89_sbox     sbox1(sbox[511:448], tmp1[3:0],   tmp2[3:0]),     sbox2(sbox[447:384], tmp1[7:4],   tmp2[7:4]),     sbox3(sbox[383:320], tmp1[11:8],  tmp2[11:8]),     sbox4(sbox[319:256], tmp1[15:12], tmp2[15:12]),     sbox5(sbox[255:192], tmp1[19:16], tmp2[19:16]),     sbox6(sbox[191:128], tmp1[23:20], tmp2[23:20]),     sbox7(sbox[127:64],  tmp1[27:24], tmp2[27:24]),     sbox8(sbox[63 :0],   tmp1[31:28], tmp2[31:28]); 
 
  assign out1[10:0]  = tmp2[31:21] ^ n2[10:0];   assign out1[31:11] = tmp2[20:0]  ^ n2[31:11]; 
 
  assign out2 = n1; 
endmodule 
 
 
module gost89_sbox(   input      [63:0] sbox,   input      [3:0]  in,   output reg [3:0]  out 
); 
  always @(in or sbox)     case (in)       4'h0: out <= sbox[63:60]; 
      4'h1: out <= sbox[59:56]; 
      4'h2: out <= sbox[55:52]; 
      4'h3: out <= sbox[51:48]; 
      4'h4: out <= sbox[47:44]; 
      4'h5: out <= sbox[43:40]; 
      4'h6: out <= sbox[39:36]; 
      4'h7: out <= sbox[35:32]; 
      4'h8: out <= sbox[31:28]; 
      4'h9: out <= sbox[27:24];       4'ha: out <= sbox[23:20];       4'hb: out <= sbox[19:16];       4'hc: out <= sbox[15:12]; 
      4'hd: out <= sbox[11:8]; 
      4'he: out <= sbox[7:4];       4'hf: out <= sbox[3:0];     endcase 
endmodule 
 
Testbench Code module gost89_mac_tb; 
  reg clk;   always     #1 clk = ~clk; 
 
  reg  [511:0] sbox = 512'h 
4a92d80e6b1c7f53eb4c6dfa23810759581da342efc7609b7da1089fe46cb2536c715 fd84a9e03b24ba0721d36859cfedb413f590ae7682c1fd057a4923e6b8c;   reg  [255:0] key  = 256'h 
0475f6e05038fbfad2c7c390edb3ca3d1547124291ae1e8a2f79cd9ed2bcefbd;   reg          reset, load_data;   reg  [63:0]  in;   wire [31:0]  out;   wire         busy;   wire [31:0]  result = out[31:0]; 
 
  gost89_mac mac1(clk, reset, load_data, sbox, key, in, out, busy); 
 
  initial begin 
    $dumpfile("gost89_mac_tb.vcd"); 
$dumpvars(0, gost89_mac_tb); 
     clk       = 0;     reset     = 0;     load_data = 0; 
 
/* Normal usage 
4b657e2ef0d2dfa2 af36b591bbd96c85 3569faad243d6fa4  b4a50c2c00000000 
*/     #1     reset = 1;     #2     reset = 0; 
    #2     in = 64'h 4b657e2ef0d2dfa2;     load_data = 1;     #2;     load_data = 0; 
 
    #34;     in = 64'h af36b591bbd96c85;     load_data = 1;     #2;     load_data = 0; 
 
    #34;     in = 64'h 3569faad243d6fa4;     load_data = 1;     #2;     load_data = 0; 
 
    #34;     if (result !== 32'h b4a50c2c)       begin $display("E"); $finish; end 
    $display("OK"); 
 
    reset = 1;     #2     reset = 0; 
    #2     in = 64'h 4b657e2ef0d2dfa2;     load_data = 1;     #2;     load_data = 0;     #10     reset = 1;     #2     reset = 0; 
 
#4 
    in = 64'h 845fbd32d185bbf2;     load_data = 1; 
    #2;     load_data = 0; 
 
    #34;     in = 64'h 387172424b8518a3;     load_data = 1; 
    #2;     load_data = 0; 
 
    #34;     in = 64'h ba95eadaa69ed200;     load_data = 1; 
    #2;     load_data = 0; 
 
    #34;     if (result !== 32'h 7acc77a2)       begin $display("E"); $finish; end 
    $display("OK"); 
 
/* Start with reset ba3d8a2c8fe0307a c1fe2bf562c45b53 c066169b334014e0  c9541f2800000000 
*/ 
    #2     in = 64'h ba3d8a2c8fe0307a;     load_data = 1;     reset = 1;     #2;     load_data = 0;     reset = 0; 
 
    #34;     in = 64'h c1fe2bf562c45b53;     load_data = 1;     #2;     load_data = 0; 
 
    #34;     in = 64'h c066169b334014e0;     load_data = 1;     #2;     load_data = 0; 
 
    #34;     if (result !== 32'h c9541f28)       begin $display("E"); $finish; end 
$display("OK"); 
 
    #10; 
    $display("All passed");     $finish;   end 
endmodule 
 
 
Electronic Code Book Module 
 
Verilog: module gost89_ecb( 
  input              clk,   input              reset,   input              mode,   input              load_data,   input      [511:0] sbox,   input      [255:0] key,   input      [63:0]  in,   output reg [63:0]  out,   output reg         busy 
); 
  reg  [5:0]  round_num;   reg  [31:0] n1, n2, round_key;   wire [31:0] out1, out2;   gost89_round     rnd(clk, sbox, round_key, n1, n2, out1, out2); 
 
  always @(posedge clk) begin     if (load_data) begin       n1 <= in[63:32];       n2 <= in[31:0];       busy <= 1;       round_num <= 0;     end 
 
    if (reset && !load_data) begin       busy <= 0;       round_num <= 32;     end 
 
    if (!reset && !load_data) begin       if (round_num < 32)         round_num <= round_num + 1;       if (round_num > 0 && round_num < 32) begin         n1 <= out1;         n2 <= out2;       end       if (round_num == 32) begin 
out[63:32] <= out2; out[31:0]  <= out1; 
        busy <= 0;       end     end   end 
 
  always @(posedge clk) begin     if (mode)       case (round_num)         0:  round_key <= key[255:224]; 
        1:  round_key <= key[223:192]; 
        2:  round_key <= key[191:160]; 
        3:  round_key <= key[159:128]; 
        4:  round_key <= key[127:96]; 
        5:  round_key <= key[95:64]; 
        6:  round_key <= key[63:32]; 
        7:  round_key <= key[31:0]; 
        8:  round_key <= key[31:0]; 
        9:  round_key <= key[63:32]; 
        10: round_key <= key[95:64]; 
11: round_key <= key[127:96]; 
12: round_key <= key[159:128]; 
13: round_key <= key[191:160]; 
14: round_key <= key[223:192]; 
15: round_key <= key[255:224]; 
16: round_key <= key[31:0]; 
        17: round_key <= key[63:32]; 
        18: round_key <= key[95:64]; 
        19: round_key <= key[127:96]; 
        20: round_key <= key[159:128]; 
        21: round_key <= key[191:160]; 
        22: round_key <= key[223:192]; 
        23: round_key <= key[255:224]; 
        24: round_key <= key[31:0]; 
        25: round_key <= key[63:32]; 
        26: round_key <= key[95:64]; 
        27: round_key <= key[127:96]; 
        28: round_key <= key[159:128]; 
        29: round_key <= key[191:160]; 
        30: round_key <= key[223:192];         31: round_key <= key[255:224];       endcase     else       case (round_num)         0:  round_key <= key[255:224]; 
1:  round_key <= key[223:192]; 
2:  round_key <= key[191:160]; 
3:  round_key <= key[159:128]; 
4:  round_key <= key[127:96]; 
5:  round_key <= key[95:64]; 
6:  round_key <= key[63:32]; 
        7:  round_key <= key[31:0]; 
        8:  round_key <= key[255:224]; 
        9:  round_key <= key[223:192]; 
        10: round_key <= key[191:160]; 
        11: round_key <= key[159:128]; 
        12: round_key <= key[127:96]; 
        13: round_key <= key[95:64]; 
        14: round_key <= key[63:32]; 
        15: round_key <= key[31:0]; 
        16: round_key <= key[255:224]; 
        17: round_key <= key[223:192]; 
        18: round_key <= key[191:160]; 
        19: round_key <= key[159:128]; 
        20: round_key <= key[127:96]; 
        21: round_key <= key[95:64]; 
        22: round_key <= key[63:32]; 
        23: round_key <= key[31:0]; 
        24: round_key <= key[31:0]; 
        25: round_key <= key[63:32]; 
26: round_key <= key[95:64]; 
27: round_key <= key[127:96]; 
28: round_key <= key[159:128]; 
29: round_key <= key[191:160]; 
30: round_key <= key[223:192]; 
31: round_key <= key[255:224];       endcase   end 
endmodule 
 
module gost89_ecb_encrypt( 
  input              clk,   input              reset,   input              load_data,   input      [511:0] sbox,   input      [255:0] key,   input      [63:0]  in,   output reg [63:0]  out,   output reg         busy 
); 
  reg  [5:0]  round_num;   reg  [31:0] n1, n2, round_key;   wire [31:0] out1, out2; 
 
  gost89_round     rnd(clk, sbox, round_key, n1, n2, out1, out2); 
 
  always @(posedge clk) begin     if (load_data) begin 
      n1 <= in[63:32];       n2 <= in[31:0];       busy <= 1;       round_num <= 0;     end 
 
    if (reset && !load_data) begin       busy <= 0;       round_num <= 32;     end 
 
    if (!reset && !load_data) begin       if (round_num < 32)         round_num <= round_num + 1;       if (round_num > 0 && round_num < 32) begin         n1 <= out1;         n2 <= out2;       end       if (round_num == 32) begin         out[63:32] <= out2;         out[31:0]  <= out1;         busy <= 0;       end     end   end 
 
  always @(posedge clk)     case (round_num)       0:  round_key <= key[255:224]; 
      1:  round_key <= key[223:192]; 
      2:  round_key <= key[191:160]; 
      3:  round_key <= key[159:128]; 
      4:  round_key <= key[127:96]; 
      5:  round_key <= key[95:64]; 
      6:  round_key <= key[63:32]; 
      7:  round_key <= key[31:0]; 
      8:  round_key <= key[255:224]; 
      9:  round_key <= key[223:192]; 
      10: round_key <= key[191:160]; 
      11: round_key <= key[159:128]; 
      12: round_key <= key[127:96]; 
      13: round_key <= key[95:64]; 
      14: round_key <= key[63:32]; 
      15: round_key <= key[31:0]; 
      16: round_key <= key[255:224]; 
      17: round_key <= key[223:192]; 
      18: round_key <= key[191:160]; 
      19: round_key <= key[159:128]; 
      20: round_key <= key[127:96]; 
      21: round_key <= key[95:64];       22: round_key <= key[63:32]; 
      23: round_key <= key[31:0]; 
      24: round_key <= key[31:0]; 
      25: round_key <= key[63:32]; 
      26: round_key <= key[95:64]; 
      27: round_key <= key[127:96]; 
      28: round_key <= key[159:128]; 
      29: round_key <= key[191:160]; 
      30: round_key <= key[223:192];       31: round_key <= key[255:224];     endcase endmodule 
 
module gost89_ecb_decrypt( 
  input              clk,   input              reset,   input              load_data,   input      [511:0] sbox,   input      [255:0] key,   input      [63:0]  in,   output reg [63:0]  out,   output reg         busy 
); 
  reg  [5:0]  round_num;   reg  [31:0] n1, n2, round_key;   wire [31:0] out1, out2; 
 
  gost89_round     rnd(clk, sbox, round_key, n1, n2, out1, out2); 
 
  initial begin     busy = 0;     round_num = 32;   end 
 
  always @(posedge clk) begin     if (load_data) begin       n1 <= in[63:32];       n2 <= in[31:0];       busy <= 1;       round_num <= 0;     end 
 
    if (reset && !load_data) begin       busy <= 0;       round_num <= 32;     end 
 
    if (!reset && !load_data) begin       if (round_num < 32)         round_num <= round_num + 1;       if (round_num > 0 && round_num < 32) begin         n1 <= out1;         n2 <= out2;       end       if (round_num == 32) begin         out[63:32] = out2;         out[31:0]  = out1;         busy <= 0;       end     end   end 
 
  always @(posedge clk)     case (round_num)       0:  round_key <= key[255:224]; 
      1:  round_key <= key[223:192]; 
      2:  round_key <= key[191:160]; 
      3:  round_key <= key[159:128]; 
      4:  round_key <= key[127:96]; 
      5:  round_key <= key[95:64]; 
      6:  round_key <= key[63:32]; 
      7:  round_key <= key[31:0]; 
      8:  round_key <= key[31:0]; 
      9:  round_key <= key[63:32]; 
      10: round_key <= key[95:64]; 
      11: round_key <= key[127:96]; 
      12: round_key <= key[159:128]; 
      13: round_key <= key[191:160]; 
      14: round_key <= key[223:192]; 
      15: round_key <= key[255:224]; 
      16: round_key <= key[31:0]; 
      17: round_key <= key[63:32]; 
      18: round_key <= key[95:64]; 
      19: round_key <= key[127:96]; 
      20: round_key <= key[159:128]; 
      21: round_key <= key[191:160]; 
      22: round_key <= key[223:192]; 
      23: round_key <= key[255:224]; 
      24: round_key <= key[31:0]; 
      25: round_key <= key[63:32]; 
      26: round_key <= key[95:64]; 
      27: round_key <= key[127:96]; 
      28: round_key <= key[159:128]; 
      29: round_key <= key[191:160]; 
      30: round_key <= key[223:192];       31: round_key <= key[255:224];     endcase endmodule 
 
module gost89_round( 
  input          clk,   input  [511:0] sbox,   input  [31:0]  key,   input  [31:0]  n1,   input  [31:0]  n2,   output [31:0]  out1,   output [31:0]  out2 
); 
  wire [31:0] tmp1, tmp2; 
 
  assign tmp1 = n1 + key; 
 
  gost89_sbox     sbox1(sbox[511:448], tmp1[3:0],   tmp2[3:0]),     sbox2(sbox[447:384], tmp1[7:4],   tmp2[7:4]),     sbox3(sbox[383:320], tmp1[11:8],  tmp2[11:8]),     sbox4(sbox[319:256], tmp1[15:12], tmp2[15:12]),     sbox5(sbox[255:192], tmp1[19:16], tmp2[19:16]),     sbox6(sbox[191:128], tmp1[23:20], tmp2[23:20]),     sbox7(sbox[127:64],  tmp1[27:24], tmp2[27:24]),     sbox8(sbox[63 :0],   tmp1[31:28], tmp2[31:28]); 
 
  assign out1[10:0]  = tmp2[31:21] ^ n2[10:0];   assign out1[31:11] = tmp2[20:0]  ^ n2[31:11];   assign out2 = n1; endmodule 
 
module gost89_sbox(   input      [63:0] sbox,   input      [3:0]  in,   output reg [3:0]  out 
); 
  always @(in or sbox)     case (in)       4'h0: out <= sbox[63:60]; 
      4'h1: out <= sbox[59:56]; 
      4'h2: out <= sbox[55:52]; 
      4'h3: out <= sbox[51:48]; 
      4'h4: out <= sbox[47:44]; 
      4'h5: out <= sbox[43:40]; 
      4'h6: out <= sbox[39:36]; 
      4'h7: out <= sbox[35:32]; 
      4'h8: out <= sbox[31:28]; 
      4'h9: out <= sbox[27:24];       4'ha: out <= sbox[23:20];       4'hb: out <= sbox[19:16];       4'hc: out <= sbox[15:12]; 
      4'hd: out <= sbox[11:8];       4'he: out <= sbox[7:4];       4'hf: out <= sbox[3:0];     endcase 
endmodule 
 
 
Test benches module gost89_ecb_tb; 
  reg clk;   always     #1 clk = ~clk; 
 
  reg  [511:0] sbox = 512'h 
4a92d80e6b1c7f53eb4c6dfa23810759581da342efc7609b7da1089fe46cb2536c715 fd84a9e03b24ba0721d36859cfedb413f590ae7682c1fd057a4923e6b8c;   reg  [255:0] key  = 256'h 
0475f6e05038fbfad2c7c390edb3ca3d1547124291ae1e8a2f79cd9ed2bcefbd;   wire mode_e = 0, mode_d = 1;   reg reset;   reg load_data;   reg [63:0] in_e1, in_e2, in_d1, in_d2;   wire [63:0] out_e1, out_e2, out_d1, out_d2;   wire busy_e1, busy_e2, busy_d1, busy_d2; 
 
  gost89_ecb     ecb1(clk, reset, mode_e, load_data, sbox, key, in_e1, out_e1, busy_e1), ecb2(clk, reset, mode_d, load_data, sbox, key, in_d1, out_d1, busy_d1); 
  gost89_ecb_encrypt     ecb_encrypt(clk, reset, load_data, sbox, key, in_e2, out_e2, busy_e2);   gost89_ecb_decrypt     ecb_decrypt(clk, reset, load_data, sbox, key, in_d2, out_d2, busy_d2); 
 
 
  initial begin 
    $dumpfile("gost89_ecb_tb.vcd"); 
    $dumpvars(0, gost89_ecb_tb); 
 
    clk = 0;     reset = 0;     load_data = 0; 
 
// Normal usage 
    #1; 
    in_e1 = 64'h d5a8a608f4f115b4; in_d1 = 64'h d658a36b11cf46eb;     in_e2 = 64'h d5a8a608f4f115b4; in_d2 = 64'h d658a36b11cf46eb;     load_data = 1; 
    #2;     load_data = 0; 
    #66;     if (out_e1 != out_e2 || out_e2 != 64'h d658a36b11cf46eb || out_d1 != out_d2 || out_d2 != 64'h d5a8a608f4f115b4)       begin $display("E"); $finish; end 
$display("OK"); 
 
// After reset     #2;     reset = 1;     #2;     reset = 0; 
    #2; 
    in_e1 = 64'h 389eb44a391474c4; in_d1 = 64'h 7aea1ed18e604249;     in_e2 = 64'h 389eb44a391474c4; in_d2 = 64'h 7aea1ed18e604249;     load_data = 1; 
    #2;     load_data = 0; 
    #66;     if (out_e1 != out_e2 || out_e2 != 64'h 7aea1ed18e604249 || out_d1 != out_d2 || out_d2 != 64'h 389eb44a391474c4)       begin $display("E"); $finish; end 
    $display("OK"); 
 
// Reset in processing 
    #2; 
    in_e1 = 64'h 0123456789abcdef; in_d1 = 64'h 0123456789abcdef;     in_e2 = 64'h 0123456789abcdef; in_d2 = 64'h 0123456789abcdef;     load_data = 1; 
    #2; load_data = 0; #12; reset = 1; 
#2;     reset = 0; 
    #2; 
    in_e1 = 64'h 379e59c3c96bb2ab; in_d1 = 64'h c35472c91cd78640;     in_e2 = 64'h 379e59c3c96bb2ab; in_d2 = 64'h c35472c91cd78640;     load_data = 1; 
    #2;     load_data = 0; 
    #66;     if (out_e1 != out_e2 || out_e2 != 64'h c35472c91cd78640 || out_d1 != out_d2 || out_d2 != 64'h 379e59c3c96bb2ab)       begin $display("E"); $finish; end 
    $display("OK"); 
 
// Start with reset 
    #2; 
    in_e1 = 64'h 3f38ae3b8f541361; in_d1 = 64'h 3b5834a000fba066;     in_e2 = 64'h 3f38ae3b8f541361; in_d2 = 64'h 3b5834a000fba066;     load_data = 1;     reset = 1;     #2;     load_data = 0;     reset = 0; 
#66; 
if (out_e1 != out_e2 || out_e2 != 64'h 3b5834a000fba066 || out_d1 != out_d2 || 
out_d2 != 64'h 3f38ae3b8f541361)       begin $display("E"); $finish; end 
    $display("OK"); 
 
    #10; 
    $display("All passed"); 
    $finish;   end 
endmodule 
 
Pipelined ECB Verilog: 
 
module gost89_pipelined_ecb_encrypt( 
  input          clk,   input  [511:0] sbox,   input  [255:0] key,   input  [63:0]  in,   output [63:0]  out 
); 
  reg  [31:0] n1[31:0], n2[31:0];   wire [31:0] out1[31:0], out2[31:0]; 
 
  always @(posedge clk) begin n1[0]  <= in[63:32]; n2[0]  <= in[31:0]; n1[1]  <= out1[0];   n2[1]  <= out2[0]; n1[2]  <= out1[1];   n2[2]  <= out2[1]; n1[3]  <= out1[2];   n2[3]  <= out2[2];     n1[4]  <= out1[3];   n2[4]  <= out2[3];     n1[5]  <= out1[4];   n2[5]  <= out2[4];     n1[6]  <= out1[5];   n2[6]  <= out2[5];     n1[7]  <= out1[6];   n2[7]  <= out2[6];     n1[8]  <= out1[7];   n2[8]  <= out2[7];     n1[9]  <= out1[8];   n2[9]  <= out2[8];     n1[10] <= out1[9];   n2[10] <= out2[9];     n1[11] <= out1[10];  n2[11] <= out2[10];     n1[12] <= out1[11];  n2[12] <= out2[11];     n1[13] <= out1[12];  n2[13] <= out2[12];     n1[14] <= out1[13];  n2[14] <= out2[13];     n1[15] <= out1[14];  n2[15] <= out2[14];     n1[16] <= out1[15];  n2[16] <= out2[15];     n1[17] <= out1[16];  n2[17] <= out2[16];     n1[18] <= out1[17];  n2[18] <= out2[17];     n1[19] <= out1[18];  n2[19] <= out2[18];     n1[20] <= out1[19];  n2[20] <= out2[19];     n1[21] <= out1[20];  n2[21] <= out2[20];     n1[22] <= out1[21];  n2[22] <= out2[21];     n1[23] <= out1[22];  n2[23] <= out2[22];     n1[24] <= out1[23];  n2[24] <= out2[23];     n1[25] <= out1[24];  n2[25] <= out2[24]; n1[26] <= out1[25];  n2[26] <= out2[25]; n1[27] <= out1[26];  n2[27] <= out2[26]; n1[28] <= out1[27];  n2[28] <= out2[27];     n1[29] <= out1[28];  n2[29] <= out2[28];     n1[30] <= out1[29];  n2[30] <= out2[29];     n1[31] <= out1[30];  n2[31] <= out2[30];   end 
 
  gost89_round     r1 (clk, sbox, key[255:224], n1[0],  n2[0],  out1[0],  out2[0]),     r2 (clk, sbox, key[223:192], n1[1],  n2[1],  out1[1],  out2[1]),     r3 (clk, sbox, key[191:160], n1[2],  n2[2],  out1[2],  out2[2]),     r4 (clk, sbox, key[159:128], n1[3],  n2[3],  out1[3],  out2[3]),     r5 (clk, sbox, key[127:96],  n1[4],  n2[4],  out1[4],  out2[4]),     r6 (clk, sbox, key[95:64],   n1[5],  n2[5],  out1[5],  out2[5]),     r7 (clk, sbox, key[63:32],   n1[6],  n2[6],  out1[6],  out2[6]),     r8 (clk, sbox, key[31:0],    n1[7],  n2[7],  out1[7],  out2[7]),     r9 (clk, sbox, key[255:224], n1[8],  n2[8],  out1[8],  out2[8]),     r10(clk, sbox, key[223:192], n1[9],  n2[9],  out1[9],  out2[9]),     r11(clk, sbox, key[191:160], n1[10], n2[10], out1[10], out2[10]),     r12(clk, sbox, key[159:128], n1[11], n2[11], out1[11], out2[11]),     r13(clk, sbox, key[127:96],  n1[12], n2[12], out1[12], out2[12]),     r14(clk, sbox, key[95:64],   n1[13], n2[13], out1[13], out2[13]),     r15(clk, sbox, key[63:32],   n1[14], n2[14], out1[14], out2[14]),     r16(clk, sbox, key[31:0],    n1[15], n2[15], out1[15], out2[15]), r17(clk, sbox, key[255:224], n1[16], n2[16], out1[16], out2[16]), r18(clk, sbox, key[223:192], n1[17], n2[17], out1[17], out2[17]), r19(clk, sbox, key[191:160], n1[18], n2[18], out1[18], out2[18]),     r20(clk, sbox, key[159:128], n1[19], n2[19], out1[19], out2[19]),     r21(clk, sbox, key[127:96],  n1[20], n2[20], out1[20], out2[20]),     r22(clk, sbox, key[95:64],   n1[21], n2[21], out1[21], out2[21]),     r23(clk, sbox, key[63:32],   n1[22], n2[22], out1[22], out2[22]),     r24(clk, sbox, key[31:0],    n1[23], n2[23], out1[23], out2[23]),     r25(clk, sbox, key[31:0],    n1[24], n2[24], out1[24], out2[24]),     r26(clk, sbox, key[63:32],   n1[25], n2[25], out1[25], out2[25]),     r27(clk, sbox, key[95:64],   n1[26], n2[26], out1[26], out2[26]),     r28(clk, sbox, key[127:96],  n1[27], n2[27], out1[27], out2[27]),     r29(clk, sbox, key[159:128], n1[28], n2[28], out1[28], out2[28]),     r30(clk, sbox, key[191:160], n1[29], n2[29], out1[29], out2[29]),     r31(clk, sbox, key[223:192], n1[30], n2[30], out1[30], out2[30]),     r32(clk, sbox, key[255:224], n1[31], n2[31], out1[31], out2[31]); 
 
  assign out[31:0]  = out1[31];   assign out[63:32] = out2[31]; endmodule 
 
module gost89_pipelined_ecb_decrypt( 
  input          clk,   input  [511:0] sbox,   input  [255:0] key,   input  [63:0]  in,   output [63:0]  out 
); 
  reg  [31:0] n1[31:0], n2[31:0];   wire [31:0] out1[31:0], out2[31:0]; 
 
  always @(posedge clk) begin     n1[0]  <= in[63:32]; n2[0]  <= in[31:0];     n1[1]  <= out1[0];   n2[1]  <= out2[0];     n1[2]  <= out1[1];   n2[2]  <= out2[1];     n1[3]  <= out1[2];   n2[3]  <= out2[2];     n1[4]  <= out1[3];   n2[4]  <= out2[3];     n1[5]  <= out1[4];   n2[5]  <= out2[4];     n1[6]  <= out1[5];   n2[6]  <= out2[5];     n1[7]  <= out1[6];   n2[7]  <= out2[6];     n1[8]  <= out1[7];   n2[8]  <= out2[7];     n1[9]  <= out1[8];   n2[9]  <= out2[8];     n1[10] <= out1[9];   n2[10] <= out2[9];     n1[11] <= out1[10];  n2[11] <= out2[10];     n1[12] <= out1[11];  n2[12] <= out2[11];     n1[13] <= out1[12];  n2[13] <= out2[12];     n1[14] <= out1[13];  n2[14] <= out2[13];     n1[15] <= out1[14];  n2[15] <= out2[14];     n1[16] <= out1[15];  n2[16] <= out2[15];     n1[17] <= out1[16];  n2[17] <= out2[16];     n1[18] <= out1[17];  n2[18] <= out2[17];     n1[19] <= out1[18];  n2[19] <= out2[18];     n1[20] <= out1[19];  n2[20] <= out2[19];     n1[21] <= out1[20];  n2[21] <= out2[20];     n1[22] <= out1[21];  n2[22] <= out2[21];     n1[23] <= out1[22];  n2[23] <= out2[22];     n1[24] <= out1[23];  n2[24] <= out2[23];     n1[25] <= out1[24];  n2[25] <= out2[24];     n1[26] <= out1[25];  n2[26] <= out2[25];     n1[27] <= out1[26];  n2[27] <= out2[26];     n1[28] <= out1[27];  n2[28] <= out2[27];     n1[29] <= out1[28];  n2[29] <= out2[28];     n1[30] <= out1[29];  n2[30] <= out2[29];     n1[31] <= out1[30];  n2[31] <= out2[30];   end 
 
  gost89_round     r1 (clk, sbox, key[255:224], n1[0],  n2[0],  out1[0],  out2[0]),     r2 (clk, sbox, key[223:192], n1[1],  n2[1],  out1[1],  out2[1]),     r3 (clk, sbox, key[191:160], n1[2],  n2[2],  out1[2],  out2[2]),     r4 (clk, sbox, key[159:128], n1[3],  n2[3],  out1[3],  out2[3]), r5 (clk, sbox, key[127:96],  n1[4],  n2[4],  out1[4],  out2[4]), r6 (clk, sbox, key[95:64],   n1[5],  n2[5],  out1[5],  out2[5]), r7 (clk, sbox, key[63:32],   n1[6],  n2[6],  out1[6],  out2[6]), r8 (clk, sbox, key[31:0],    n1[7],  n2[7],  out1[7],  out2[7]), 
    r9 (clk, sbox, key[31:0],    n1[8],  n2[8],  out1[8],  out2[8]),     r10(clk, sbox, key[63:32],   n1[9],  n2[9],  out1[9],  out2[9]),     r11(clk, sbox, key[95:64],   n1[10], n2[10], out1[10], out2[10]),     r12(clk, sbox, key[127:96],  n1[11], n2[11], out1[11], out2[11]),     r13(clk, sbox, key[159:128], n1[12], n2[12], out1[12], out2[12]),     r14(clk, sbox, key[191:160], n1[13], n2[13], out1[13], out2[13]),     r15(clk, sbox, key[223:192], n1[14], n2[14], out1[14], out2[14]),     r16(clk, sbox, key[255:224], n1[15], n2[15], out1[15], out2[15]),     r17(clk, sbox, key[31:0],    n1[16], n2[16], out1[16], out2[16]),     r18(clk, sbox, key[63:32],   n1[17], n2[17], out1[17], out2[17]),     r19(clk, sbox, key[95:64],   n1[18], n2[18], out1[18], out2[18]),     r20(clk, sbox, key[127:96],  n1[19], n2[19], out1[19], out2[19]),     r21(clk, sbox, key[159:128], n1[20], n2[20], out1[20], out2[20]),     r22(clk, sbox, key[191:160], n1[21], n2[21], out1[21], out2[21]),     r23(clk, sbox, key[223:192], n1[22], n2[22], out1[22], out2[22]),     r24(clk, sbox, key[255:224], n1[23], n2[23], out1[23], out2[23]),     r25(clk, sbox, key[31:0],    n1[24], n2[24], out1[24], out2[24]),     r26(clk, sbox, key[63:32],   n1[25], n2[25], out1[25], out2[25]),     r27(clk, sbox, key[95:64],   n1[26], n2[26], out1[26], out2[26]),     r28(clk, sbox, key[127:96],  n1[27], n2[27], out1[27], out2[27]),     r29(clk, sbox, key[159:128], n1[28], n2[28], out1[28], out2[28]), r30(clk, sbox, key[191:160], n1[29], n2[29], out1[29], out2[29]), r31(clk, sbox, key[223:192], n1[30], n2[30], out1[30], out2[30]), r32(clk, sbox, key[255:224], n1[31], n2[31], out1[31], out2[31]);   assign out[31:0]  = out1[31];   assign out[63:32] = out2[31]; endmodule module gost89_round( 
  input          clk,   input  [511:0] sbox,   input  [31:0]  key,   input  [31:0]  n1,   input  [31:0]  n2,   output [31:0]  out1,   output [31:0]  out2 
); 
  wire [31:0] tmp1, tmp2; 
 
  assign tmp1 = n1 + key; 
 
  gost89_sbox     sbox1(sbox[511:448], tmp1[3:0],   tmp2[3:0]),     sbox2(sbox[447:384], tmp1[7:4],   tmp2[7:4]),     sbox3(sbox[383:320], tmp1[11:8],  tmp2[11:8]),     sbox4(sbox[319:256], tmp1[15:12], tmp2[15:12]), sbox5(sbox[255:192], tmp1[19:16], tmp2[19:16]), sbox6(sbox[191:128], tmp1[23:20], tmp2[23:20]), sbox7(sbox[127:64],  tmp1[27:24], tmp2[27:24]), sbox8(sbox[63 :0],   tmp1[31:28], tmp2[31:28]);   assign out1[10:0]  = tmp2[31:21] ^ n2[10:0];   assign out1[31:11] = tmp2[20:0]  ^ n2[31:11]; 
 
  assign out2 = n1; endmodule 
 
module gost89_sbox( 
  input      [63:0] sbox,   input      [3:0]  in,   output reg [3:0]  out 
); 
  always @(in or sbox)     case (in) 
      4'h0: out <= sbox[63:60]; 
      4'h1: out <= sbox[59:56]; 
      4'h2: out <= sbox[55:52]; 
      4'h3: out <= sbox[51:48]; 
      4'h4: out <= sbox[47:44]; 
      4'h5: out <= sbox[43:40]; 
      4'h6: out <= sbox[39:36]; 
      4'h7: out <= sbox[35:32]; 
      4'h8: out <= sbox[31:28]; 
      4'h9: out <= sbox[27:24]; 
      4'ha: out <= sbox[23:20]; 
      4'hb: out <= sbox[19:16]; 
      4'hc: out <= sbox[15:12]; 
      4'hd: out <= sbox[11:8]; 
      4'he: out <= sbox[7:4];       4'hf: out <= sbox[3:0];     endcase 
endmodule 
 
Test benches: module gost89_pipelined_ecb_tb;   reg clk;   always     #1 clk = ~clk; 
 
  reg  [511:0] sbox = 512'h 
4a92d80e6b1c7f53eb4c6dfa23810759581da342efc7609b7da1089fe46cb2536c715 fd84a9e03b24ba0721d36859cfedb413f590ae7682c1fd057a4923e6b8c;   reg  [255:0] key  = 256'h 
0475f6e05038fbfad2c7c390edb3ca3d1547124291ae1e8a2f79cd9ed2bcefbd;   reg  [63:0]  in_e, in_d;   wire [63:0]  out_e, out_d; 
 
  gost89_pipelined_ecb_encrypt     pipelined_ecb_encrypt(clk, sbox, key, in_e, out_e);   gost89_pipelined_ecb_decrypt pipelined_ecb_decrypt(clk, sbox, key, in_d, out_d);   initial begin 
    $dumpfile("gost89_pipelined_ecb_tb.vcd"); 
    $dumpvars(0, gost89_pipelined_ecb_tb); 
 
    clk = 0; 
 
// One vector 
    #1; 
    in_e = 64'h d5a8a608f4f115b4; in_d = 64'h d658a36b11cf46eb; 
    #64;     if (out_e !== 64'h d658a36b11cf46eb || out_d !== 64'h d5a8a608f4f115b4)       begin $display("E"); $finish; end 
    $display("OK"); 
 
// Three vectors 
    #4 
    in_e = 64'h 389eb44a391474c4; in_d = 64'h 7aea1ed18e604249; 
    #2; 
    in_e = 64'h 379e59c3c96bb2ab; in_d = 64'h c35472c91cd78640; 
    #8; 
    in_e = 64'h 3f38ae3b8f541361; in_d = 64'h 3b5834a000fba066; 
    #54;     if (out_e !== 64'h 7aea1ed18e604249 || out_d !== 64'h 389eb44a391474c4)       begin $display("E"); $finish; end 
    $display("OK"); 
    #2; 
    if (out_e !== 64'h c35472c91cd78640 || out_d !== 64'h 379e59c3c96bb2ab)       begin $display("E"); $finish; end 
    $display("OK"); 
    #8; 
    if (out_e !== 64'h 3b5834a000fba066 || out_d !== 64'h 3f38ae3b8f541361)       begin $display("E"); $finish; end 
    $display("OK"); 
 
    #10; 
    $display("All passed"); 
    $finish;   end 
endmodule 
 
CFB 
Verilog: 
module gost89_cfb(   input              clk,   input              reset,   input              mode,   input              load_data,   input      [511:0] sbox,   input      [255:0] key,   input      [63:0]  in,   output reg [63:0]  out,   output reg         busy 
); 
  reg  [63:0] gamma;   reg  [63:0] in_value;   wire [63:0] out_ecb;   wire        reset_ecb, load_ecb, busy_ecb; 
 
  assign load_ecb = !reset && load_data;   assign reset_ecb = load_ecb; 
 
  gost89_ecb_encrypt ecb_encrypt(clk, reset_ecb, load_ecb, sbox, key, gamma, out_ecb, busy_ecb); 
 
  always @(posedge clk) begin     if (reset && !load_data) begin       gamma <= in;       busy <= 0;     end 
 
    if (!reset & load_data) begin       in_value <= in;       busy <= 1;     end 
 
    if (!reset && !load_data && !busy_ecb && busy) begin 
      if (mode) gamma <= in_value;       else      gamma <= out_ecb ^ in_value;       out   <= out_ecb ^ in_value;       busy  <= 0;     end   end 
endmodule 
 
module gost89_cfb_encrypt( 
  input              clk,   input              reset,   input              load_data,   input      [511:0] sbox,   input      [255:0] key,   input      [63:0]  in,   output reg [63:0]  out,   output reg         busy 
); 
  reg  [63:0] gamma;   reg  [63:0] in_value;   wire [63:0] out_ecb;   wire        load_ecb, busy_ecb; 
 
  assign load_ecb = !reset && load_data;   assign reset_ecb = load_ecb;   gost89_ecb_encrypt ecb_encrypt(clk, reset_ecb, load_ecb, sbox, key, gamma, out_ecb, busy_ecb); 
 
  always @(posedge clk) begin     if (reset && !load_data) begin       gamma <= in;       busy <= 0;     end 
 
    if (!reset & load_data) begin       in_value <= in;       busy <= 1;     end 
 
    if (!reset && !load_data && !busy_ecb && busy) begin       gamma <= out_ecb ^ in_value;       out   <= out_ecb ^ in_value;       busy  <= 0;     end   end 
endmodule 
 
module gost89_cfb_decrypt(   input              clk,   input              reset, 
  input              load_data,   input      [511:0] sbox,   input      [255:0] key,   input      [63:0]  in,   output reg [63:0]  out,   output reg         busy 
); 
  reg  [63:0] gamma;   reg  [63:0] in_value;   wire [63:0] out_ecb;   wire        load_ecb, busy_ecb; 
 
  assign load_ecb = !reset && load_data;   assign reset_ecb = load_ecb; 
 
  gost89_ecb_encrypt ecb_encrypt(clk, reset_ecb, load_ecb, sbox, key, gamma, out_ecb, busy_ecb); 
 
  always @(posedge clk) begin     if (reset && !load_data) begin       gamma <= in;       busy <= 0;     end 
 
    if (!reset & load_data) begin       in_value <= in; 
      busy <= 1;     end 
 
    if (!reset && !load_data && !busy_ecb && busy) begin       gamma <= in_value;       out   <= out_ecb ^ in_value;       busy  <= 0;     end   end 
endmodule module gost89_round( 
  input          clk,   input  [511:0] sbox,   input  [31:0]  key,   input  [31:0]  n1,   input  [31:0]  n2,   output [31:0]  out1,   output [31:0]  out2 
); 
  wire [31:0] tmp1, tmp2; 
 
  assign tmp1 = n1 + key; 
 
  gost89_sbox     sbox1(sbox[511:448], tmp1[3:0],   tmp2[3:0]),     sbox2(sbox[447:384], tmp1[7:4],   tmp2[7:4]),     sbox3(sbox[383:320], tmp1[11:8],  tmp2[11:8]),     sbox4(sbox[319:256], tmp1[15:12], tmp2[15:12]),     sbox5(sbox[255:192], tmp1[19:16], tmp2[19:16]),     sbox6(sbox[191:128], tmp1[23:20], tmp2[23:20]),     sbox7(sbox[127:64],  tmp1[27:24], tmp2[27:24]),     sbox8(sbox[63 :0],   tmp1[31:28], tmp2[31:28]); 
 
  assign out1[10:0]  = tmp2[31:21] ^ n2[10:0];   assign out1[31:11] = tmp2[20:0]  ^ n2[31:11]; 
 
  assign out2 = n1; endmodule module gost89_sbox( 
  input      [63:0] sbox,   input      [3:0]  in,   output reg [3:0]  out 
); 
  always @(in or sbox)     case (in) 
      4'h0: out <= sbox[63:60]; 
      4'h1: out <= sbox[59:56]; 
      4'h2: out <= sbox[55:52]; 
      4'h3: out <= sbox[51:48]; 
      4'h4: out <= sbox[47:44]; 
      4'h5: out <= sbox[43:40]; 
      4'h6: out <= sbox[39:36]; 
      4'h7: out <= sbox[35:32]; 
      4'h8: out <= sbox[31:28]; 
      4'h9: out <= sbox[27:24];       4'ha: out <= sbox[23:20]; 
      4'hb: out <= sbox[19:16]; 
      4'hc: out <= sbox[15:12]; 
      4'hd: out <= sbox[11:8]; 
      4'he: out <= sbox[7:4];       4'hf: out <= sbox[3:0];     endcase 
endmodule 
 
TestBenches 
`timescale 1ns / 1ps 
 
module gost89_cfb_tb;   reg clk;   always     #1 clk = ~clk; 
 
  reg  [511:0] sbox = 512'h 
4a92d80e6b1c7f53eb4c6dfa23810759581da342efc7609b7da1089fe46cb2536c715 fd84a9e03b24ba0721d36859cfedb413f590ae7682c1fd057a4923e6b8c; 
  reg  [255:0] key  = 256'h 
0475f6e05038fbfad2c7c390edb3ca3d1547124291ae1e8a2f79cd9ed2bcefbd;   wire mode_e = 0, mode_d = 1;   reg  reset;   reg  load_data;   reg  [63:0] in_e1, in_e2, in_d1, in_d2;   wire [63:0] out_e1, out_e2, out_d1, out_d2;   wire busy_e1, busy_e2, busy_d1, busy_d2; 
 
  gost89_cfb cfb1(clk, reset, mode_e, load_data, sbox, key, in_e1, out_e1, busy_e1);   gost89_cfb cfb2(clk, reset, mode_d, load_data, sbox, key, in_d1, out_d1, busy_d1);   gost89_cfb_encrypt cfb_encrypt1(clk, reset, load_data, sbox, key, in_e2, out_e2, busy_e2);   gost89_cfb_decrypt cfb_decrypt1(clk, reset, load_data, sbox, key, in_d2, out_d2, busy_d2); 
 
/* 
CFB mode (gamma: 6aa0379517bb57af): 
8d437364581af0da 12911df3eddcc0fb b73369c4b5cf3e7d  
54826055ab718bc7 585ddacf1a45e472 a3ec5a4eb4359095 
 
CFB mode (gamma: fa5679a45f118aed): 
419677a6eff07f2f 4f40b75be8e64341 cd02e6ef903d27da  
27d3e781cc4fcf43 9c7480fb9ea9df69 458ff5081b0fd688 
*/ 
 
  initial begin 
    $dumpfile("gost89_cfb_tb.vcd"); 
    $dumpvars(0, gost89_cfb_tb); 
 
    clk = 0;     reset = 0;     load_data = 0; 
/* 
// Normal usage 
    #1; 
    in_e1 = 64'h 6aa0379517bb57af; in_d1 = 64'h 6aa0379517bb57af;     in_e2 = 64'h 6aa0379517bb57af; in_d2 = 64'h 6aa0379517bb57af;     reset = 1;     #2;     reset = 0; 
    in_e1 = 64'h 8d437364581af0da; in_d1 = 64'h 54826055ab718bc7;     in_e2 = 64'h 8d437364581af0da; in_d2 = 64'h 54826055ab718bc7;     load_data = 1; 
    #2;     load_data = 0; 
    #68;     if (out_e1 != out_e2 || out_e2 != 64'h 54826055ab718bc7 || out_d1 != 64'h 
12911df3eddcc0fb || out_d2 != 64'h 6aa0379517bb57af)       begin $display("E"); $finish; end 
    $display("OK"); 
    in_e1 = 64'h 12911df3eddcc0fb; in_d1 = 64'h 585ddacf1a45e472;     in_e2 = 64'h 12911df3eddcc0fb; in_d2 = 64'h 585ddacf1a45e472;     load_data = 1; 
    #2;     load_data = 0; 
    #68;     if (out_e1 != out_e2 || out_e2 != 64'h 585ddacf1a45e472 || out_d1 != 64'h 
12911df3eddcc0fb || out_d2 != 64'h 6aa0379517bb57af)       begin $display("E"); $finish; end 
    $display("OK"); 
*/ 
// Change gamma 
    #2; 
    in_e1 = 64'h fa5679a45f118aed; in_d1 = 64'h fa5679a45f118aed;     in_e2 = 64'h fa5679a45f118aed; in_d2 = 64'h fa5679a45f118aed;     reset = 1;     #2;     reset = 0;     in_e1 = 64'h 419677a6eff07f2f; in_d1 = 64'h 27d3e781cc4fcf43;     in_e2 = 64'h 419677a6eff07f2f; in_d2 = 64'h 27d3e781cc4fcf43;     load_data = 1; 
    #2;     load_data = 0; 
    #68;     if (out_e1 != out_e2 || out_e2 != 64'h 27d3e781cc4fcf43 || out_d1 != out_d2 || out_d2 != 64'h 419677a6eff07f2f) 
      begin $display("E"); $finish; end 
    $display("OK"); 
 
// Reset in processing 
    #2; 
    in_e1 = 64'h 6aa0379517bb57af; in_d1 = 64'h 6aa0379517bb57af;     in_e2 = 64'h 6aa0379517bb57af; in_d2 = 64'h 6aa0379517bb57af;     reset = 1;     #2;     reset = 0; 
    in_e1 = 64'h 8d437364581af0da; in_d1 = 64'h 54826055ab718bc7;     in_e2 = 64'h 8d437364581af0da; in_d2 = 64'h 54826055ab718bc7;     load_data = 1; 
    #2;     load_data = 0; 
    #10;     in_e1 = 64'h fa5679a45f118aed; in_d1 = 64'h fa5679a45f118aed;     in_e2 = 64'h fa5679a45f118aed; in_d2 = 64'h fa5679a45f118aed;     reset = 1;     #2;     reset = 0;     in_e1 = 64'h 419677a6eff07f2f; in_d1 = 64'h 27d3e781cc4fcf43;     in_e2 = 64'h 419677a6eff07f2f; in_d2 = 64'h 27d3e781cc4fcf43;     load_data = 1; 
    #2; 
    load_data = 0; 
    #68;     if (out_e1 != out_e2 || out_e2 != 64'h 27d3e781cc4fcf43 || out_d1 != out_d2 || out_d2 != 64'h 419677a6eff07f2f)       begin $display("E"); $finish; end 
    $display("OK"); 
 
    #10; 
    $display("All passed"); 
    $finish;   end 
endmodule 
 
  
 
References 
1.	Gost official website https://tools.ietf.org/html/rfc5830#section-8 
2.	Github https://github.com/fanatid/gost28147-89 
 
 
